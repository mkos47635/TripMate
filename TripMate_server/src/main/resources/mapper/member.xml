<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.trip.member.model.mapper.MemberMapper">

	<resultMap type="memberDto" id="member">
		<result column="user_id" property="userId"/>
		<result column="user_name" property="userName"/>
		<result column="user_password" property="userPwd" />
		<result column="email_id" property="emailId" />
		<result column="email_domain" property="emailDomain" />
		
		<result column="refresh_token" property="refreshToken"/>
	</resultMap>
	
	<select id="idCheck" parameterType="String" resultType="int">
		select count(user_id)
		from members
		where user_id = #{userId}
	</select>

	<insert id="joinMember" parameterType="memberDto">
		insert into members (user_name, user_id, user_password, email_id, email_domain, join_date, refresh_token)
		values (#{userName}, #{userId}, #{userPwd}, #{emailId}, #{emailDomain}, now(), #{refreshToken})
	</insert>
		
<!-- 	<select id="loginMember" parameterType="loginRequestDto" resultMap="member">
		select user_id, user_name, refresh_token
		from members
		where user_id = #{userId} and user_password = #{userPwd}
	</select> -->
	
    <select id="getMember" parameterType="String" resultMap="member">
		select user_id , user_name, user_password, email_id, email_domain, refresh_token
		from members 
		where user_id = #{userId};
    </select>
    
    <select id="getUserId" parameterType="String" resultType="String">
		select user_id 
		from members 
		where user_id = #{userId};
    </select>
    
	<!-- JWT -->
	<update id="saveRefreshToken" parameterType="map">
		update members
		set refresh_token = #{refreshToken}
		where user_id = #{userId}
	</update>
	
	<select id="getRefreshToken" parameterType="string" resultType="string">
		select refresh_token
		from members
		where user_id = #{userId}
	</select>
	
	<update id="deleteRefreshToken" parameterType="map">
		update members
		set refresh_token = #{refreshToken, jdbcType=VARCHAR}
		where user_id = #{userId}
	</update>
<!-- 	<update id="modifyMember" parameterType="memberDto"> -->
<!-- 		update members -->
<!-- 		set user_name = #{userName}, user_password = #{userPwd}, email_id = #{emailId}, email_domain = #{emailDomain} -->
<!-- 		where user_id = #{userId} -->
<!-- 	</update> -->
	
	<update id="modifyMember" parameterType="memberDto">
		update members
		<trim prefix="set" suffixOverrides=",">
			<if test="userName != null">user_name = #{userName},</if>
			<if test="userPwd != null">user_password = #{userPwd},</if>
			<if test="emailId != null">email_id = #{emailId},</if>
			<if test="emailDomain != null">email_domain = #{emailDomain},</if>
		</trim>
		where user_id = #{userId}
	</update>
	
	<delete id="deleteMember" parameterType="String">
		delete from members
		where user_id = #{userId}
	</delete>
	
	<select id="searchId" parameterType="String" resultType="String">
		select user_id
		from members
		where user_name = #{userName} and email_id = #{emailId} and email_domain = #{emailDomain}
	</select>
	
	<select id="searchPwd" parameterType="String" resultType="String">
		select user_password
		from members
		where user_id = #{userId} and user_name = #{userName} and email_id = #{emailId} and email_domain = #{emailDomain}
	</select>
	
	
	
	
</mapper>